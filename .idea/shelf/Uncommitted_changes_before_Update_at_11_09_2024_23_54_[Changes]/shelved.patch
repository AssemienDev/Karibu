Index: utilisateur/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.hashers import make_password\r\nfrom django.contrib.messages.storage import session\r\nfrom django.shortcuts import render, redirect\r\nfrom django.contrib import messages\r\nfrom utilisateur.forms import ContactForm, ConnexionForm, InscriptionForm, PasseOublierEmailForm, PasseOublierCodeForm, \\\r\n    ChangePasseForm, ReservationChambreForm, ReservationEventForm\r\nfrom utilisateur.models import Chambre, Suite, ChambreClimatisee, ChambreVentilee, Espace, Utilisateur, \\\r\n    CodeRecuperationUser\r\nfrom django.core.mail import send_mail\r\nimport random\r\nimport string\r\n\r\n\r\n# La Vue de l'acceuil\r\ndef index(request):\r\n    # Recuperer les chambres\r\n    chambre = Chambre.objects.filter(statutChambre='LIBRE')[:6]\r\n\r\n    # Passer les chambres en paramètres\r\n    context = {\r\n        'chambre': chambre\r\n    }\r\n\r\n    # Afficher le template de la page d'acceuil\r\n    return render(request, 'utilisateur/home.html', context)\r\n\r\n\r\n# La Vue du contact\r\ndef contact(request):\r\n    # Verifier que la requete est POST\r\n    if request.method == 'POST':\r\n\r\n        # Recuperer le formulaire de contact depuis la page\r\n        form = ContactForm(request.POST)\r\n\r\n        # Valider le formulaire de contact\r\n        if form.is_valid():\r\n            form.save()\r\n            # Recuperer vers la page d'Acceuil\r\n            return redirect('acceuil')\r\n\r\n    # Recuperer le formulaire de contact\r\n    form = ContactForm()\r\n\r\n    # Passer le form de contact en paramètres\r\n    context = {\r\n        'formContact': form\r\n    }\r\n\r\n    # Afficher le template de la page de contact\r\n    return render(request, 'utilisateur/contact.html', context)\r\n\r\n\r\n# La Vue de connexion\r\ndef connexion(request):\r\n    if 'emailUser' in request.session:\r\n        return redirect('acceuil')\r\n    else:\r\n        # Verifier que la requete est POST\r\n        if request.method == 'POST':\r\n\r\n            # Recuperer le formulaire de contact depuis la page\r\n            form = ConnexionForm(request.POST)\r\n\r\n            # Valider le formulaire de contact\r\n            if form.is_valid():\r\n                request.session['emailUser'] = form.cleaned_data['emailUser']\r\n\r\n                # Recuperer vers la page de profil\r\n                # return redirect('acceuil')\r\n\r\n        # Recuperer le formulaire de connexion\r\n        form = ConnexionForm()\r\n\r\n        # Passer le form de contact en paramètres\r\n        context = {\r\n            'formConnexion': form\r\n        }\r\n\r\n        # Afficher le template de la page de connexion\r\n        return render(request, 'utilisateur/connexion.html', context)\r\n\r\n\r\n# Profil\r\ndef profilUtilisateur(request):\r\n    if 'emailUser' in request.session:\r\n\r\n        client = Utilisateur.objects.get(mail_utilisateur=request.session['emailUser'])\r\n\r\n        context = {\r\n            'InfoClient': client\r\n        }\r\n\r\n        # Afficher le template de la page d'inscription\r\n        return render(request, 'utilisateur/profilUtilisateur.html', context)\r\n\r\n    else:\r\n        return redirect('connexion')\r\n\r\n\r\n# Déconnexion\r\ndef decoUtilisateur(request):\r\n    try:\r\n        # Supprime l'email de la session si présent\r\n        if 'emailUser' in request.session:\r\n            del request.session['emailUser']\r\n    except KeyError:\r\n        pass\r\n\r\n        # Redirige vers la page de connexion\r\n    return redirect('connexion')\r\n\r\n\r\n\r\n# La Vue d'inscription\r\ndef inscription(request):\r\n    if 'emailUser' in request.session:\r\n        return redirect('acceuil')\r\n    else:\r\n        # Verifier que la requete est POST\r\n        if request.method == 'POST':\r\n\r\n            # Recuperer le formulaire de contact depuis la page\r\n            form = InscriptionForm(request.POST)\r\n\r\n            # Valider le formulaire de contact\r\n            if form.is_valid():\r\n                form.save()\r\n\r\n                # Recuperer vers la page d'Acceuil\r\n                return redirect('connexion')\r\n\r\n        # Recuperer le formulaire d'inscription\r\n        form = InscriptionForm()\r\n\r\n        # Passer le form de contact en paramètres\r\n        context = {\r\n            'formInscription': form\r\n        }\r\n\r\n        # Afficher le template de la page d'inscription\r\n        return render(request, 'utilisateur/inscription.html', context)\r\n\r\n\r\ndef generate_random_code(length=6):\r\n    \"\"\"Génère un code aléatoire de 6 caractères (lettres majuscules et chiffres).\"\"\"\r\n    characters = string.ascii_uppercase + string.digits\r\n    return ''.join(random.choices(characters, k=length))\r\n\r\n# La Vue du passe oublié Email\r\ndef passeOublierEmail(request):\r\n    if 'emailUser' in request.session:\r\n        return redirect('acceuil')\r\n    else:\r\n        # Verifier que la requete est POST\r\n        if request.method == 'POST':\r\n\r\n            # Recuperer le formulaire de contact depuis la page\r\n            form = PasseOublierEmailForm(request.POST)\r\n\r\n            # Valider le formulaire de l'email oublier\r\n            if form.is_valid():\r\n                request.session['emailPasseOublier'] = form.cleaned_data['emailUser']\r\n\r\n                code = generate_random_code()\r\n\r\n                email = form.cleaned_data['email']\r\n                try:\r\n                    # Rechercher l'utilisateur associé à cet email\r\n                    user = Utilisateur.objects.get(mail_utilisateur=email)\r\n                    # Envoyer un email de réinitialisation du mot de passe\r\n\r\n                    code_recuperation, created = CodeRecuperationUser.objects.get_or_create(client=user)\r\n\r\n                    # Mettre à jour le code et la date de création\r\n                    code_recuperation.code = code\r\n                    code_recuperation.save()\r\n\r\n\r\n                    send_mail(\r\n                        subject='Réinitialisation du mot de passe Code',\r\n                        message=f'Voici votre code: {code}.',\r\n                        from_email='support@votresite.com',\r\n                        recipient_list=[email],\r\n                        fail_silently=False,\r\n                    )\r\n\r\n                    messages.success(request, 'Un email a été envoyé contenant le code pour réinitialiser votre mot de passe.')\r\n                    # Recuperer vers la page du code\r\n                    return redirect('passeOublierCode')  # Redirigez vers une page\r\n                except Utilisateur.DoesNotExist:\r\n                    messages.error(request, 'Aucun utilisateur trouvé avec cet email.')\r\n\r\n        else:\r\n\r\n            # Recuperer le formulaire de l'email lors du mot de passe oublier\r\n            form = PasseOublierEmailForm()\r\n\r\n        # Passer le form de contact en paramètres\r\n        context = {\r\n            'formEmail': form\r\n        }\r\n\r\n        # Afficher le template de la page d'email\r\n        return render(request, 'utilisateur/passeOublierEmail.html', context)\r\n\r\n\r\n# La Vue du passe oublié Code\r\ndef passeOublierCode(request):\r\n    if 'emailUser' in request.session:\r\n        return redirect('acceuil')\r\n    else:\r\n        # Verifier que la requete est POST\r\n        if request.method == 'POST':\r\n\r\n            # Recuperer le formulaire de contact depuis la page\r\n            form = PasseOublierCodeForm(request.POST, request)\r\n\r\n            # Valider le formulaire de code\r\n            if form.is_valid():\r\n                # Recuperer vers la page changer mot de passe\r\n                return redirect('passeOublierChangePasse')\r\n\r\n        # Recuperer le formulaire du code lors du mot de passe oublier\r\n        form = PasseOublierCodeForm()\r\n\r\n        # Passer le form de contact en paramètres\r\n        context = {\r\n            'formCode': form\r\n        }\r\n\r\n        # Afficher le template de la page de code\r\n        return render(request, 'passeOublierCode.html', context)\r\n\r\n\r\n# La Vue du message\r\ndef passeOublierChangePasse(request):\r\n    if 'emailUser' in request.session:\r\n        return redirect('acceuil')\r\n    else:\r\n        # Verifier que la requete est POST\r\n        if request.method == 'POST':\r\n\r\n            # Recuperer le formulaire de contact depuis la page\r\n            form = ChangePasseForm(request.POST, request)\r\n\r\n            # Valider le formulaire du mot de passe oublier\r\n            if form.is_valid():\r\n\r\n                password = form.cleaned_data['password']\r\n\r\n                # Récupérer l'utilisateur\r\n                user = Utilisateur.objects.get(mail_utilisateur=request.session['emailPasseOublier'])\r\n                user.mot_de_passe = make_password(password)  # Hacher le nouveau mot de passe\r\n                user.save()\r\n\r\n                messages.success(request, 'Votre mot de passe a été changé avec succès.')\r\n                # Recuperer vers la page de connexion\r\n                return redirect('connexion')\r\n\r\n        # Recuperer le formulaire de mot de passe\r\n        form = ChangePasseForm()\r\n\r\n        # Passer le form de contact en paramètres\r\n        context = {\r\n            'formCode': form\r\n        }\r\n        # Afficher le template de la page de message\r\n        return render(request, 'utilisateur/changePasse.html', context)\r\n\r\n\r\n# La Vue des chambres disponibles\r\ndef listeChambreDisponible(request):\r\n    # Recuperer les chambres\r\n    chambre = Chambre.objects.filter(statutChambre='LIBRE')\r\n\r\n    # Passer les chambres en paramètres\r\n    context = {\r\n        'chambres': chambre\r\n    }\r\n\r\n    # Afficher le template de la page d'acceuil\r\n    return render(request, 'utilisateur/chambresDisponible.html', context)\r\n\r\n\r\n# Detail de la chambre disponible\r\ndef detailChambre(request, chambre_id):\r\n    if 'emailUser' in request.session:\r\n\r\n        if Chambre.objects.filter(id=chambre_id).exists():\r\n\r\n            # Recuperer la chambre précise\r\n            chambre = Chambre.objects.filter(id=chambre_id)\r\n\r\n            if chambre:\r\n                if chambre.suite:\r\n                    # Recuperer les suites\r\n                    chambres = Suite.objects.all()\r\n                elif chambre.chambre_climatisee:\r\n                    # Recuperer les chambres climatisées\r\n                    chambres = ChambreClimatisee.objects.all()\r\n                elif chambre.chambre_ventilee:\r\n                    # Recuperer les chambres ventilées\r\n                    chambres = ChambreVentilee.objects.all()\r\n\r\n            # Passer les chambres en paramètres\r\n            context = {\r\n                'detailChambre': chambre,\r\n                'chambres': chambres\r\n            }\r\n\r\n            # Afficher le template de la page d'acceuil\r\n            return render(request, 'utilisateur/detailsChambre.html', context)\r\n\r\n        else:\r\n            return redirect('chambreDisponible')\r\n    else:\r\n        return redirect('connexion')\r\n\r\n\r\n# Detail de la chambre disponible avec vidéo\r\ndef detailChambreVideo(request, chambre_id):\r\n    if 'emailUser' in request.session:\r\n\r\n        if Chambre.objects.filter(id=chambre_id).exists():\r\n\r\n            # Recuperer la chambre précise\r\n            chambre = Chambre.objects.filter(id=chambre_id)\r\n\r\n            # Passer les chambres en paramètres\r\n            context = {\r\n                'detailChambre': chambre,\r\n            }\r\n\r\n            # Afficher le template de la page d'acceuil\r\n            return render(request, 'utilisateur/detailsChambreVideo.html', context)\r\n\r\n        else:\r\n            return redirect('chambreDisponible')\r\n    else:\r\n        return redirect('connexion')\r\n\r\n\r\n# Réservation de la chambre disponible\r\ndef reservationChambre(request, chambre_id):\r\n    if 'emailUser' in request.session:\r\n\r\n        if Chambre.objects.filter(id=chambre_id).exists():\r\n\r\n            # Recuperer la chambre précise\r\n            chambre = Chambre.objects.filter(id=chambre_id)\r\n\r\n            # Verifier que la requete est POST\r\n            if request.method == 'POST':\r\n\r\n                # Recuperer le formulaire de contact depuis la page\r\n                form = ReservationChambreForm(request.POST)\r\n\r\n                # Valider le formulaire de reservation\r\n                if form.is_valid():\r\n                    pass\r\n\r\n                    # Recuperer vers le profil du client\r\n                    #return redirect('profilClient')\r\n\r\n            # Recuperer le formulaire de mot de passe\r\n            form = ReservationChambreForm()\r\n\r\n            # Passer les chambres en paramètres\r\n            context = {\r\n                'detailChambre': chambre,\r\n                'forms': form\r\n            }\r\n\r\n            # Afficher le template de la page d'acceuil\r\n            return render(request, 'utilisateur/reservationChambre.html', context)\r\n\r\n        else:\r\n            return redirect('chambreDisponible')\r\n    else:\r\n        return redirect('connexion')\r\n\r\n\r\n# Detail de l'espace event\r\ndef espaceEvent(request):\r\n    if Espace.objects.exists():\r\n\r\n        # Recuperer les details de l'espace\r\n        try:\r\n            espace = Espace.objects.get()  # Récupère l'objet Espace unique\r\n        except Espace.DoesNotExist:\r\n            espace = None  # Gère le cas où l'objet n'existe pas\r\n\r\n        # Passer l'espace en paramètre\r\n        context = {\r\n            'espace': espace,\r\n        }\r\n\r\n        # Afficher le template de la page d'acceuil\r\n        return render(request, 'utilisateur/espaceEvenementiel.html', context)\r\n\r\n    else:\r\n        return redirect('acceuil')\r\n\r\n\r\n# Réservation de la chambre disponible\r\ndef reservationEvent(request):\r\n    if 'emailUser' in request.session:\r\n\r\n        try:\r\n            espace = Espace.objects.get()  # Récupère l'objet Espace unique\r\n        except Espace.DoesNotExist:\r\n            espace = None\r\n\r\n            # Verifier que la requete est POST\r\n            if request.method == 'POST':\r\n\r\n                # Recuperer le formulaire de contact depuis la page\r\n                form = ReservationEventForm(request.POST)\r\n\r\n                # Valider le formulaire de reservation\r\n                if form.is_valid():\r\n                    pass\r\n\r\n                    # Recuperer vers le profil du client\r\n                    #return redirect('profilClient')\r\n\r\n            # Recuperer le formulaire de mot de passe\r\n            form = ReservationEventForm()\r\n\r\n            # Passer les chambres en paramètres\r\n            context = {\r\n                'detailEspace': espace,\r\n                'forms': form\r\n            }\r\n\r\n            # Afficher le template de la page d'acceuil\r\n            return render(request, 'utilisateur/reservationEvent.html', context)\r\n\r\n    else:\r\n        return redirect('connexion')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utilisateur/views.py b/utilisateur/views.py
--- a/utilisateur/views.py	(revision 599bf350d7bb961ca244cb442694fa8a8febcc61)
+++ b/utilisateur/views.py	(date 1726098752029)
@@ -12,6 +12,7 @@
 
 
 # La Vue de l'acceuil
+
 def index(request):
     # Recuperer les chambres
     chambre = Chambre.objects.filter(statutChambre='LIBRE')[:6]
Index: administrateur/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\r\nfrom django.conf import settings\r\nfrom django.conf.urls.static import static\r\nfrom django.contrib import admin\r\n\r\nfrom administrateur import views\r\n\r\n\r\nurlpatterns = [\r\n    #Creer des urls\r\n\r\n    #url de la liste des utilisateurs\r\n    path('ListUser', views.list_user),\r\n\r\n    #url de la liste des chambres\r\n    path('ListChambre', views.list_chambre),\r\n\r\n    #url de la liste des chambres climatisées\r\n    path('ListChambreClim', views.list_chambre_clim),\r\n\r\n    #url de la liste des chambres ventilées\r\n    path('ListChambreVent', views.list_chambre_vent),\r\n\r\n    #url de la liste des suites\r\n    path('ListSuite', views.list_suite),\r\n\r\n    #url de la liste des espaces\r\n    path('ListEspace', views.list_espace),\r\n\r\n    #url de la liste des commandes d' espaces\r\n    path('ListCommandeEsp', views.list_commande_esp),\r\n\r\n    #url de la liste des commandes de logements\r\n    path('ListCommandeLog', views.list_commande_log),\r\n\r\n\r\n\r\n    \r\n\r\n]\r\n\r\n#Parametrer le chargement des médias\r\nurlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/administrateur/urls.py b/administrateur/urls.py
--- a/administrateur/urls.py	(revision 599bf350d7bb961ca244cb442694fa8a8febcc61)
+++ b/administrateur/urls.py	(date 1726098752009)
@@ -33,6 +33,20 @@
     #url de la liste des commandes de logements
     path('ListCommandeLog', views.list_commande_log),
 
+    #url pour l'ajout des chambres
+    path('AjoutChambre',views.ajout_chambre),
+
+    #url pour l'ajout des chambres ventilees
+    path('AjoutChambreVent',views.ajout_chambre_vent),
+
+    #url pour l'ajout des chambres  climatisees
+    path('AjoutChambreClim',views.ajout_chambre_clim),
+
+    #url pour l'ajout des suites
+    path('AjoutSuite',views.ajout_suite),
+
+    #url pour l'ajout des espaces
+    path('AjoutEsapce',views.ajout_espace)
 
 
     
Index: utilisateur/migrations/0002_auto_20240830_0049.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utilisateur/migrations/0002_auto_20240830_0049.py b/utilisateur/migrations/0002_auto_20240830_0049.py
new file mode 100644
--- /dev/null	(date 1726098752009)
+++ b/utilisateur/migrations/0002_auto_20240830_0049.py	(date 1726098752009)
@@ -0,0 +1,63 @@
+# Generated by Django 3.1.6 on 2024-08-29 23:49
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('utilisateur', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.AlterField(
+            model_name='administrateur',
+            name='id',
+            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
+        ),
+        migrations.AlterField(
+            model_name='chambre',
+            name='id',
+            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
+        ),
+        migrations.AlterField(
+            model_name='chambreclimatisee',
+            name='id',
+            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
+        ),
+        migrations.AlterField(
+            model_name='chambreventilee',
+            name='id',
+            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
+        ),
+        migrations.AlterField(
+            model_name='commandeespace',
+            name='id',
+            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
+        ),
+        migrations.AlterField(
+            model_name='commandelogement',
+            name='id',
+            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
+        ),
+        migrations.AlterField(
+            model_name='espace',
+            name='id',
+            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
+        ),
+        migrations.AlterField(
+            model_name='paiement',
+            name='id',
+            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
+        ),
+        migrations.AlterField(
+            model_name='suite',
+            name='id',
+            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
+        ),
+        migrations.AlterField(
+            model_name='utilisateur',
+            name='id',
+            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
+        ),
+    ]
Index: utilisateur/migrations/0003_merge_20240830_2252.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/utilisateur/migrations/0003_merge_20240830_2252.py b/utilisateur/migrations/0003_merge_20240830_2252.py
new file mode 100644
--- /dev/null	(date 1726098752009)
+++ b/utilisateur/migrations/0003_merge_20240830_2252.py	(date 1726098752009)
@@ -0,0 +1,14 @@
+# Generated by Django 3.1.6 on 2024-08-30 21:52
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('utilisateur', '0002_rename_mail_admin_utilisateur_mail_utilisateur'),
+        ('utilisateur', '0002_auto_20240830_0049'),
+    ]
+
+    operations = [
+    ]
Index: administrateur/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\r\nfrom utilisateur.models import Utilisateur,Chambre,ChambreClimatisee,ChambreVentilee,Suite,Espace,CommandeEspace,CommandeLogement\r\n\r\n# Create your views here.\r\n\r\n\r\n#je mets directement le contexte dedans\r\n\r\n#la vue pour récuperer la liste des utilisateurs\r\ndef list_user (request):\r\n    user = Utilisateur.objects.all()\r\n    return render (request, \"liste_user.html\",{'utilisateur':user})\r\n\r\n\r\n#la vue pour lister les chambres\r\ndef list_chambre(request):\r\n    chambre = Chambre.objects.all()\r\n    return render(request,\"liste_chambre.html\",{\"chambre\":chambre})\r\n\r\n\r\n#la vue pour lister les chambres climatisées\r\ndef list_chambre_clim(request):\r\n    chambre_clim = ChambreClimatisee.objects.values(\"numeroChambre\",\"description\",\"prix_nuite\",\"prix_journee\")\r\n    return render(request,\"list_chambre_clim.html\",{\"chambre_clim\":chambre_clim})\r\n\r\n#la vue pour lister les chambres ventilées\r\ndef list_chambre_vent(request):\r\n    chambre_vent = ChambreVentilee.objects.values(\"numeroChambre\",\"description\",\"prix_nuite\",\"prix_journe\")\r\n    return render(request,\"list_chambre_vent.html\",{\"chambre_vent\":chambre_vent})\r\n\r\n\r\n#la vue pour lister les suites\r\ndef list_suite(request):\r\n    suite = Suite.objects.values(\"numeroChambre\",\"description\",\"prix_nuite\",\"prix_journe\")\r\n    return render(request,\"list_suite.html\",{\"suite\":suite})\r\n\r\n#la vue pour lister  les espaces\r\ndef list_espace(request):\r\n    espace = Espace.objects.values(\"numeroChambre\",\"description\",\"prix\")\r\n    return render(request,\"list_espace.html\",{\"espace\":espace})\r\n\r\n#la vue pour lister les commandes d'espace \r\ndef list_commande_esp(request):\r\n    commande = CommandeEspace.objects.all()\r\n    return render(request,\"list_commande_esp.html\",{\"commande\":commande})\r\n\r\n#la vue pour lister les commandes de logement\r\ndef list_commande_log(request):\r\n    logement = CommandeLogement.objects.all()\r\n    return render(request,'list_commande_log.html',{\"logement\":logement})\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/administrateur/views.py b/administrateur/views.py
--- a/administrateur/views.py	(revision 599bf350d7bb961ca244cb442694fa8a8febcc61)
+++ b/administrateur/views.py	(date 1726098752009)
@@ -48,3 +48,175 @@
 def list_commande_log(request):
     logement = CommandeLogement.objects.all()
     return render(request,'list_commande_log.html',{"logement":logement})
+
+
+#la vue pour ajouter une  chambre
+def ajout_chambre(request):
+    if request.method == "POST":
+        #récupère les données envoyées par le form via les noms donnés dans le template html et les stocks dans les variables
+        statutChambre == request.POST.get('statutChambre')
+        chambre_climatisee == request.POST.get('chambre_climatisee') == 'on' #on est la valeur envoyée si la case est cochée
+        chambre_ventilee== request.POST.get('chambre_ventilee') == 'on'
+        suite == request.POST.get('suite') == 'on' 
+
+        #creation
+        Chambre.objects.create(
+            statutChambre=statutChambre,
+            chambre_climatisee=chambre_climatisee,
+            chambre_ventilee=chambre_ventilee,
+        )
+
+         #redirection vers la liste des chambres après ajout
+        return redirect('list_chambre')
+
+    return render(request,'ajout_chambre.html')
+
+
+
+
+#la vue pour ajouter une chambre ventilee
+def ajout_chambre_vent(request):
+    if request.method == "POST":
+        #récupère les données envoyées par le form via les noms donnés dans le template html et les stocks dans les variables 
+        numeroChambre = request.POST.get('NumeroChambre')
+        photo1 = request.FILES.get('photo1')
+        photo2 = request.FILES.get('photo2')
+        photo3 = request.FILES.get('photo3')
+        photo4 = request.FILES.get('photo4')
+        video1 = request.FILES.get('video1')
+        video2 = request.FILES.get('video2')
+        video3 = request.FILES.get('video3')
+        description = request.POST.get('description')
+        prix_nuite = request.POST.get('prix_nuite')
+        prix_journe = request.POST.get('prix_journe')
+
+
+        #créer une nouvelle chambre
+        ChambreVentilee.objects.Create(
+            numeroChambre=numeroChambre,
+            photo1=photo1,
+            photo2=photo2,
+            photo3=photo3,
+            photo4=photo4,
+            video1=video1,
+            video2=video2,
+            video3=video3,
+            description=description,
+            prix_nuite=prix_nuite,
+            prix_journe=prix_journe
+        )
+
+        #redirection vers la liste des chambres après ajout
+        return redirect('list_chambre_vent')
+
+    return render(request,'ajout_chambre_vent.html')
+
+
+#la vue pour ajouter une chambre climatisee
+def ajout_chambre_clim(request):
+    if request.method == "POST":
+        #récupère les données envoyées par le form via les noms donnés dans le template html et les stocks dans les variables 
+        numeroChambre = request.POST.get('NumeroChambre')
+        photo1 = request.FILES.get('photo1')
+        photo2 = request.FILES.get('photo2')
+        photo3 = request.FILES.get('photo3')
+        photo4 = request.FILES.get('photo4')
+        video1 = request.FILES.get('video1')
+        video2 = request.FILES.get('video2')
+        video3 = request.FILES.get('video3')
+        description = request.POST.get('description')
+        prix_nuite = request.POST.get('prix_nuite')
+        prix_journe = request.POST.get('prix_journe')
+
+
+        #créer une nouvelle chambre
+        ChambreVentilee.objects.Create(
+            numeroChambre=numeroChambre,
+            photo1=photo1,
+            photo2=photo2,
+            photo3=photo3,
+            photo4=photo4,
+            video1=video1,
+            video2=video2,
+            video3=video3,
+            description=description,
+            prix_nuite=prix_nuite,
+            prix_journe=prix_journe
+        )
+
+        #redirection vers la liste des chambres après ajout
+        return redirect('list_chambre_clim')
+
+    return render(request,'ajout_chambre_clim.html')
+
+
+#la vue pour ajouter une suite
+def ajout_suite(request):
+    if request.method == "POST":
+        #récupère les données envoyées par le form via les noms donnés dans le template html et les stocks dans les variables 
+        numeroChambre = request.POST.get('NumeroChambre')
+        photo1 = request.FILES.get('photo1')
+        photo2 = request.FILES.get('photo2')
+        photo3 = request.FILES.get('photo3')
+        photo4 = request.FILES.get('photo4')
+        video1 = request.FILES.get('video1')
+        video2 = request.FILES.get('video2')
+        video3 = request.FILES.get('video3')
+        description = request.POST.get('description')
+        prix_nuite = request.POST.get('prix_nuite')
+        prix_journe = request.POST.get('prix_journe')
+
+
+        #créer une nouvelle chambre
+        ChambreVentilee.objects.Create(
+            numeroChambre=numeroChambre,
+            photo1=photo1,
+            photo2=photo2,
+            photo3=photo3,
+            photo4=photo4,
+            video1=video1,
+            video2=video2,
+            video3=video3,
+            description=description,
+            prix_nuite=prix_nuite,
+            prix_journe=prix_journe
+        )
+
+        #redirection vers la liste des chambres après ajout
+        return redirect('list_suite')
+
+    return render(request,'ajout_suite.html')
+
+
+#la vue pour ajouter un espace
+def ajout_espace(request):
+    if request.method == "POST":
+        #récupère les données envoyées par le form via les noms donnés dans le template html et les stocks dans les variables 
+        numeroChambre = request.POST.get('NumeroChambre')
+        photo1 = request.FILES.get('photo1')
+        photo2 = request.FILES.get('photo2')
+        photo3 = request.FILES.get('photo3')
+        photo4 = request.FILES.get('photo4')
+        photo5 = request.FILES.get('photo5')
+        photo6 = request.FILES.get('photo6')
+        description = request.POST.get('description')
+        prix = request.POST.get('prix')
+
+
+        #créer une nouvelle chambre
+        ChambreVentilee.objects.Create(
+            numeroChambre=numeroChambre,
+            photo1=photo1,
+            photo2=photo2,
+            photo3=photo3,
+            photo4=photo4,
+            photo5=photo5,
+            photo6=photo6,
+            description=description,
+            prix=prix
+        )
+
+        #redirection vers la liste des chambres après ajout
+        return redirect('list_espace')
+
+    return render(request,'ajout_espace.html')
\ No newline at end of file
